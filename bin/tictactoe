#!/usr/bin/env ruby

require_relative '../lib/tic_tac_toe'

board = [" ", " ", " ", " ", " ", " ", " ", " ", " "]

puts "Welcome to Tic Tac Toe!"
display_board(board)


play(board)


def valid_move?(board, position)

end

def turn(board)
  puts "Please enter 1-9"
  input = gets.strip
  index = input_to_index(input)

  until valid_move?(board, index) == true
    puts "Please enter a valid move"
    input = gets.strip
    index = input_to_index(input)
  end
  player = current_player(board)
  move(board, index, player)
  display_board(board)
end

def turn_count(board)
  turns = 0
  board.each |space|
    if space == "X" || space == "O"
      turns += 1
    end
  end
  return turns
end

def current_player(board)
  if turn_count(board) %2 == 0
    return "X"
  else
    return "O"
  end
end

def won?(board)
  WIN_COMBINATIONS.each {|win_combo|
    index_0 = win_combo[0]
    index_1 = win_combo[1]
    index_2 = win_combo[2]

    position_1 = board[index_0]
    position_2 = board[index_1]
    position_3 = board[index_2]

    if position_1 == "X" && position_2 == "X" && position_3 == "X"
      return win_combo
    elsif position_1 == "O" && position_2 == "O" && position_3 == "O"
      return win_combo
    end
  }
end

def full?(board)
  board.all? {|index| index == "X" || index == "O"}
end

def draw?(board)
  if won?(board) == false && full?(board)
    return true
  else
    return false
  end
end

def over?(board)
  if won?(board) || full?(board) || draw?(board)
    return true
  else
    return false
  end
end

def winner(board)
  index = []
  index = won?(board)

  if index == false
    return nil
  else
    if board[index[0]] == "X"
      return "X"
    else
      return "O"
    end
  end
end
